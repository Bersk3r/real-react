# 바벨(babel)과 웹팩(webpack)은 웹 애플리케이션을 제작할 때, 없어서는 안 되는 기반 기술이 되었음
## 리액트 또는 뷰를 기반으로 프로젝트를 구축해주는 create-react-app, next.js, vue-cli, nuxt 등의 도구는 바벨과 웹팩을 기본적으로 포함함

# 도구의 도움을 받아 자동으로 프로젝트를 구축하면 바벨과 웹팩을 모르더라도 간단 웹 애플리케이션을 만들 수 있음
## 리액트와 뷰를 처음 배우는 단계에선 바벨과 웹팩을 몰라도 무관하나, 프로젝트 규모가 커지면 바벨과 웹팩을 외면하기 힘듦
## 제스트(jest)와 같은 테스트 프레임워크를 도입할 때, 스토리북(storybook)과 같이 별도의 빌드 과정이 필요할 대, 서버사이드 렌더링을 위해 서버 측 코드를 빌드해야 하는 경우, 바벨과 웹팩을 이해해야만 하는 순간이 존재함

# 리액트로 개발을 하다보면 개발자 대부분이 바벨 설정으로 인해 애를 먹음
## 바벨을 제대로 이해하지 못하면 인터넷에 떠도는 잘못된 설정을 가져올 수도 있음
### 해당 설정은 잘 돌아갈 수도 있으나, 언젠가 문제가 발생할 우려가 존재함
## 바벨과 폴리필의 관계를 이해하지 못하면 오래된 브라우저에서 에러가 발생하는 코드를 만들 수 있음

# 바벨의 실행 방식은 하기와 같음
## @babel/cli로 실행
## 웹팩에서 babel-loader로 실행
## @babel/core를 직접 실행
## @babel/register로 실행
### @babel/register를 이용하면 노드에서 require 코드가 실행될 때 동적으로 바벨이 실행되도록 할 수 있음
### 리액트를 @babel/register와 함께 사용하는 경우가 많지 않음

# 바벨
## 바벨은 입력과 출력이 모두 자바스크립트 코드인 컴파일러임
## 보통 컴파일러가 고수준의 언어를 저수준의 언어로 변환하는 것과 비교됨
## 초기의 바벨은 ES6 코드를 ES5 코드로 변경해주는 컴파일러였으나, 현재에는 바벨을 이용해서 리액트의 JSX 문법, 타입스크립트와 같은 정적 타입의 언어, 코드 압축, 제안(proposal) 단계에 있는 문법 등을 사용할 수 있음
## 바벨을 사용하기 위해선 하기 명령어를 실행하여 패키지를 설치해야 함
### npm init -y
### npm i @babel/core @babel/cli @babel/plugin-transform-arrow-functions @babel/plugin-transform-template-literals @babel/preset-react
### 바벨을 실행하기 위해선 @babel/core 패키지를 필수로 설치해야 함

# 리액트 프리셋을 이용하여 JSX 문법을 변환할 수 있음
## 템플릿 리터럴 플러그인을 이용하여 템플릿 리터럴 코드를 변환할 수 있음
## 화살표 함수 플러그인을 사용하면 화살표 함수로 변환이 가능함

# @/babel/cli를 사용한 바벨의 실행 방법은 하기와 같음
## 예시) npx babel src/code.js --presets=@babel/preset-react --plugins=@babel/plugin-transform-template-literals,@babel/plugin-transform-arrow-functions
## @babel/cli로 거의 모든 설정값을 표현가능하나, 설정할 내용이 많거나 실행 환경에 따라 설정값이 다른 경우에는 설정 파일을 따로 만드는 게 좋음
## 바벨 6가지는 .babelrc 파일로 설정값을 관리하였으나, 바벨 7부터는 babel.config.js 파일로 관리하는 것을 추천함

# 자바스크립트는 동적이므로, 설정값을 만들 수 있음
## .babelrc.js나 babel.config.js을 만들면 하기와 같이 명령어가 축약됨
### npx babel src/code.js;
### npx babel src/code.js --out-file dist.js // 컴파일 결과 파일 단위 저장
### npx babel src --out-dir dist // 컴파일 결과 폴더 단위 저장

# 웹팩의 babel-loader로 실행하기
## 웹팩을 이용하기 위해 하기 패키지를 설치
### npm install webpack webpack-cli webpack-dev-server babel-loader

# webpack.config.js의 구조는 하기와 같음
## entry : 웹팩으로 번들링(bundling)할 파일을 지정
## output : 번들링된 결과를 저장할 경로와 파일을 지정
## module : 자바스크립트 파일을 babel-loader가 처리하도록 설정하며, babel-loader는 바벨의 설정 파일을 이용하므로 이전에 만들어 놓은 babel.config.js 파일의 내용이 설정값으로 사용됨
## optimization : 웹팩은 기본적으로 자바스크립트 파일을 압축함
# npx webpack 명령어로 웹팩을 실행

# @babel/cli와 babel-loader는 모두 @babel/core를 이용하여 바벨을 실행함

# @babel/core 내 내용은 하기와 같음
## require('@babel/core') : @babel/core 모듈을 가져온다
## fs.readFileSync(filename, 'utf8') : 컴파일할 파일의 내용을 가져온다
## plugins : 바벨 플러그인과 프리셋을 설정한다
## babel.transformSync : transformSync 함수를 호출해서 바벨을 실행한다
## configFile : false : babel.config.js 설정 파일을 사용하지 않도록 함

# @babel/core 모듈을 직접 사용하는 방식은 자유도가 높다는 장점이 존재함
## 하기와 같이 코드를 입력했을 경우
"""
const presets = ['@babel/preset-react'];
const plugins = ['@babel/plugin-transform-template-literals'];

const presets = ['@babel/preset-react'];
const plugins = ['@babel/plugin-transform-arrow-functions'];
"""

# @babel/cli 또는 babel-loader를 이용한다면 바벨을 두 번 실행해야 한다
## @babel/core를 사용하면 바벨을 좀 더 효율적으로 실행할 수 있다
## 바벨은 컴파일할 때 하기 세 단계를 거침
### 파싱(parse) 단계 : 입력된 코드로부터 AST(abstract syntax tree)를 생성함
### 변환(transform) 단계 : AST를 원하는 형태를 변환한다
### 생성(generate) 단계 : AST를 코드로 출력한다

## AST는 코드의 구문(syntax)이 분석된 결과를 담고 있는 구조체다
## 코드가 같다면 AST도 같기 때문에 같은 코드에 대해서 하나의 AST를 만들어놓고 재사용할 수 있다
## 