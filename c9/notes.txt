# 자바스크립트는 동적 타입 언어임
## 변수의 타입은 런타임에 결정됨

# 정적 타입 언어는 변수의 타입이 컴파일 타임에 결정됨

# 동적 타입 언어에는 파이썬, PHP 등이 있으며, 정적 타입 언어에는 자바, C++ 등이 있음
## 차이는 단순해보이나, 개발할 때 고려할 사항은 많음

# 타입스크립트는 자바스크립트의 모든 기능을 포함하면서 정적 타입을 지원하는 언어임
## 자바스크립트에 정적 타입을 추가해주는 언어와 도구는 Elm, ReasonML, PureScript, Flow 등으로 다양함

# 동적 타입 언어와 정적 타입 언어의 차이점
## 동적 타입 언어
### 타입에 대한 고민을 하지 않아도 되므로 배우기 쉬움
### 코드의 양이 적을 때 생산성이 높음
### 타입 오류가 런 타임시에 발견됨
## 정적 타입 언어
### 변수를 선언할 때마다 타입을 고민해야 하므로 진입 장벽이 높음
### 코드의 양이 많을 때 동적 타입 언어에 비해 생산성이 높음
### 타입 오류가 컴파일 시에 발견됨
## 동적 타입 언어와 정적 타입 언어는 장단점이 서로 달라 팀과 프로젝트의 성격에 따라 선택해야 함
## 작은 규모의 프로젝트에서는 동적 타입 언어를 사용하고, 큰 규모의 프로젝트에서는 정적 타입의 언어를 사용하기를 권장함

# 정적 타입 언어의 코드는 타입으로 서로 연결되어 있음
## 덕분에 연관된 코드 간의 이동이 쉬우며 변수명이나 함수명을 변경하는 등의 리팩터링도 쉬움
## 임포트 하지 않고 코드를 작성해도 단축키 한 번이면 IDE가 필요한 임포트 코드를 자동으로 넣어줌
## 함수를 호출하기 위해 함수 이름과 괄호를 입력하면 함수의 매개변수 종류와 반환값의 타입을 확인할 수 있음
## 속성값의 종류가 많은 객체라 해도 객체 이름과 점을 입력하면 속성값 목록을 확인할 수 있음
### 철자가 틀리거나 숫자 타입의 변수에 문자열을 입력하면 IDE가 즉시 알려줌

# 타입스크립트는 마이크로소프트가 개발하고 있고 꾸준하게 업데이트 버전이 나오고 있음
## 자바스크립트의 새로운 표준이 나오거나 거의 표준이 확실시되는 기능은 타입스크립트에도 빠르게 추가됨
## 타입스크립트 측에서 리액트 개발자들의 의견을 잘 반영해주므로 JSX 문법과 리액트 컴포넌트의 타입을 정의하는 데 큰 어려움이 없음
## 타입스크립트는 다른 경쟁 언어에 비해 큰 생태계를 가지고 있음
### 웬만큼 유명한 라이브러리에는 타입스크립트의 타입 정의 파일이 거의 존재함
### 타입 정의 파일은 라이브러리 자체에서 가지고 있거나, DefinitelyTyped라는 깃허브 저장소에 포함되어 있음

# 타입스크립트는 마이크로소프트에서 개발하고 있는 IDE인 Visual Studio Code와 궁합이 맞음
## vscode는 특별한 설정 없이도 타입스크립트 파일의 타입 검사를 자동으로 실행함
## 타입스크립트를 이용하여 자바스크립트 파일도 타입 검사를 하므로 레거시(legacy) 프로젝트에서 유용함
## vscode는 타입스크립트 코드를 위한 다양한 리팩터링 기능을 지원하므로 생산성에 큰 도움이 됨
## vscode는 타입스크립트를 선택하는 중요한 요소로 작용하므로 타입스크립트 개발은 vscode로 사용하는 것을 추천함

# 타입스크립트는 https://www.typescriptlang.org/play에서 실습 코드를 제공하며, 모든 코드는 strict 모드를 켠 상태로 사용함

# 타입 스크립트는 변수를 선얼할 때 타입을 파악하며, 타입이 다른 변수에 다른 타입의 값을 입력하면 에러가 발생함
## 코드를 실행하기 전에 타입 에러를 확인할 수 있음
## 변수의 타입을 명시적으로 입력하지 않아도 타입스크립트가 숫자 타입으로 인식함
## 자동으로 타입을 인식하는 기능을 타입 추론(type inference)라고 함
## 타입 추론 덕분에 기존의 자바스크립트 코드를 크게 변경하지 않고 타입스크립트를 비교적 쉽게 적용할 수 있음

# 자바스크립트는 동적 타입 언어이므로 타입과 상관없이 작성이 가능하나 타입스크립트에선 변수의 타입이 숫자이거나 문자열일 수 있다면 명시적으로 타입 정보를 입력해야 됨
## 변수 이름 오른쪽에 콜론과 함께 타입을 선언할 수 있음 (예시 > let v1: number | string = 123)