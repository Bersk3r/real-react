# 자바스크립트는 동적 타입 언어임
## 변수의 타입은 런타임에 결정됨

# 정적 타입 언어는 변수의 타입이 컴파일 타임에 결정됨

# 동적 타입 언어에는 파이썬, PHP 등이 있으며, 정적 타입 언어에는 자바, C++ 등이 있음
## 차이는 단순해보이나, 개발할 때 고려할 사항은 많음

# 타입스크립트는 자바스크립트의 모든 기능을 포함하면서 정적 타입을 지원하는 언어임
## 자바스크립트에 정적 타입을 추가해주는 언어와 도구는 Elm, ReasonML, PureScript, Flow 등으로 다양함

# 동적 타입 언어와 정적 타입 언어의 차이점
## 동적 타입 언어
### 타입에 대한 고민을 하지 않아도 되므로 배우기 쉬움
### 코드의 양이 적을 때 생산성이 높음
### 타입 오류가 런 타임시에 발견됨
## 정적 타입 언어
### 변수를 선언할 때마다 타입을 고민해야 하므로 진입 장벽이 높음
### 코드의 양이 많을 때 동적 타입 언어에 비해 생산성이 높음
### 타입 오류가 컴파일 시에 발견됨
## 동적 타입 언어와 정적 타입 언어는 장단점이 서로 달라 팀과 프로젝트의 성격에 따라 선택해야 함
## 작은 규모의 프로젝트에서는 동적 타입 언어를 사용하고, 큰 규모의 프로젝트에서는 정적 타입의 언어를 사용하기를 권장함

# 정적 타입 언어의 코드는 타입으로 서로 연결되어 있음
## 덕분에 연관된 코드 간의 이동이 쉬우며 변수명이나 함수명을 변경하는 등의 리팩터링도 쉬움
## 임포트 하지 않고 코드를 작성해도 단축키 한 번이면 IDE가 필요한 임포트 코드를 자동으로 넣어줌
## 함수를 호출하기 위해 함수 이름과 괄호를 입력하면 함수의 매개변수 종류와 반환값의 타입을 확인할 수 있음
## 속성값의 종류가 많은 객체라 해도 객체 이름과 점을 입력하면 속성값 목록을 확인할 수 있음
### 철자가 틀리거나 숫자 타입의 변수에 문자열을 입력하면 IDE가 즉시 알려줌

# 타입스크립트는 마이크로소프트가 개발하고 있고 꾸준하게 업데이트 버전이 나오고 있음
## 자바스크립트의 새로운 표준이 나오거나 거의 표준이 확실시되는 기능은 타입스크립트에도 빠르게 추가됨
## 타입스크립트 측에서 리액트 개발자들의 의견을 잘 반영해주므로 JSX 문법과 리액트 컴포넌트의 타입을 정의하는 데 큰 어려움이 없음
## 타입스크립트는 다른 경쟁 언어에 비해 큰 생태계를 가지고 있음
### 웬만큼 유명한 라이브러리에는 타입스크립트의 타입 정의 파일이 거의 존재함
### 타입 정의 파일은 라이브러리 자체에서 가지고 있거나, DefinitelyTyped라는 깃허브 저장소에 포함되어 있음

# 타입스크립트는 마이크로소프트에서 개발하고 있는 IDE인 Visual Studio Code와 궁합이 맞음
## vscode는 특별한 설정 없이도 타입스크립트 파일의 타입 검사를 자동으로 실행함
## 타입스크립트를 이용하여 자바스크립트 파일도 타입 검사를 하므로 레거시(legacy) 프로젝트에서 유용함
## vscode는 타입스크립트 코드를 위한 다양한 리팩터링 기능을 지원하므로 생산성에 큰 도움이 됨
## vscode는 타입스크립트를 선택하는 중요한 요소로 작용하므로 타입스크립트 개발은 vscode로 사용하는 것을 추천함

# 타입스크립트는 https://www.typescriptlang.org/play에서 실습 코드를 제공하며, 모든 코드는 strict 모드를 켠 상태로 사용함

# 타입 스크립트는 변수를 선얼할 때 타입을 파악하며, 타입이 다른 변수에 다른 타입의 값을 입력하면 에러가 발생함
## 코드를 실행하기 전에 타입 에러를 확인할 수 있음
## 변수의 타입을 명시적으로 입력하지 않아도 타입스크립트가 숫자 타입으로 인식함
## 자동으로 타입을 인식하는 기능을 타입 추론(type inference)라고 함
## 타입 추론 덕분에 기존의 자바스크립트 코드를 크게 변경하지 않고 타입스크립트를 비교적 쉽게 적용할 수 있음

# 자바스크립트는 동적 타입 언어이므로 타입과 상관없이 작성이 가능하나 타입스크립트에선 변수의 타입이 숫자이거나 문자열일 수 있다면 명시적으로 타입 정보를 입력해야 됨
## 변수 이름 오른쪽에 콜론과 함께 타입을 선언할 수 있음 (예시 > let v1: number | string = 123)

# 배열은 두 타입으로 정의 가능
## number[], Array<number>

# 문자열과 숫자로 구성된 튜플 타입을 정의 가능함

# undefined와 null은 타입으로 사용될 수 있음
## undefined 타입에 숫자를 입력하면 타입 에러가 발생됨
## undefined와 null 타입은 다른 타입과 함꼐 유니온 타입으로 정의할 때 많이 사용됨

# 타입스크립트에선 문자열 리터럴과 숫자 리터럴을 타입으로 정의할 수 있음

# any 타입은 모든 종류의 값을 허용하는 타입임
## any 타입에는 숫자와 문자열뿐만이 아니라 함수도 입력될 수 있음
## any 타입은 기존의 자바스크립트 코드로 작성된 프로젝트를 타입스크립트로 포팅하는 경우 유용하게 사용될 수 있음
## 기존 프로젝트의 모든 코드에 타입을 한번에 정의하는 것은 부담스럽기 때문에 타입 에러가 나는 부분은 임시로 any 타입으로 정의하면 됨

# any 타입은 실제로 타입을 알 수 없는 경우나 타입 정의가 안 된 외부 패키지를 사용하는 경우에도 사용하기 좋음
## 단, any 타입을 남발하면 타입스크립트를 사용하는 의미가 퇴색되기 때문에 되도록 피하는 것이 좋음

# 아무 값도 반환하지 않고 종료되는 함수의 반환 타입은 void 타입으로 정의할 수 있음

# 항상 예외가 발생해서 비정상적으로 종료되거나 무한 루프 때문에 종료되지 않는 함수의 반환 타입은 never 타입으로 정의할 수 있음

# object 타입은 자바스크립트에서 일반적으로 사용되는 객체의 타입임
## 객체의 속성에 대한 정보가 존재하지 않을 때 특정 속성값에 접근하면 타입 에러가 발생함
## 속성 정보를 포함해서 타입을 정의하기 위해서는 뒤에서 설명하는 인터페이스를 사용해야 함

# 여러 타입의 교집합과 합집합을 각각 교차 (intersection) 타입과 유니온(union) 타입으로 표현될 수 있음
## 교차 타입은 & 기호로 정의하고, 유니온 타입은 | 으로 정의함

# type 키워드를 사용하면 타입에 별칭을 줄 수 있음
## 타입 별칭은 타입을 선언할 때 편리하게 사용할 수 있음

# 열거형 타입은 enum 키워드를 사용해서 정의함
## 열거형 타입의 각 원소는 값으로 사용될 수 있고, 타입으로 사용될 수 있음
## 열거형 타입의 첫 번째 원소에 값을 할당하지 않으면 자동으로 0이 할당됨
## 열거형 타입의 각 원소에 숫자 또는 문자열을 할당할 수 있음
## 명시적으로 값을 입력하지 않으면 이전 원소에서 1만큼 증가한 값이 할당됨
## 다른 타입과 달리 열거형 타입은 컴파일 후에도 관련된 코드가 남음
### 열거형 타입은 객체로 존재함
### 열거형 타입의 각 원소는 이름과 값이 양방향으로 매핑(mapping)됨
### 열거형 타입은 객체로 존재하기 때문에 해당 객체를 런타임에 사용할 수 있음

# 열거형 타입은 객체이기 때문에 일반적인 객체로 다룰 수 있음
## 각 원소의 이름과 값이 양방향으로 매핑되어 있기 때문에 값을 이용해서 이름을 가져올 수 있음

# 열거형 타입의 원소에 문자열을 할당하는 경우에는 단방향으로 매핑됨
## 서로 다른 원소의 이름 또는 값이 같을 경우 충돌이 발생하기 때문임

# 열거형 타입을 자주 사용한다면 몇 가지 유틸리티 함수를 만들어서 사용하는 것이 좋음
## 원소가 숫자인 경우에는 양방향으로 매핑되므로 주의해야 함
## 객체의 속성 값이 문자열인 경우만 계산하면 열거형 타입에서 원소의 갯수를 구할 수 있음

# 열거형 타입은 컴파일 후에도 남아 있기 때문에 번들 파일의 크기가 불필요하게 커질 수 있음
## 열거형 타입의 객체에 접근하지 않는다면 굳이 컴파일 후에 객체로 남겨놓을 필요는 없음
## 상수(const) 열거형 타입을 사용하면 컴파일 결과에 열거형 타입의 객체를 남겨 놓지 않을 수 있음
### 열거형 타입의 객체를 생성하는 코드가 없어지며 열거형 타입이 사용된 코드는 원소의 값으로 대체되므로 코드가 상당히 간소화됨
### 상수 열거형 타입을 모든 경우에 사용가능한 것은 아님 -> 열거형 타입을 상수로 정의하면 열거형 타입의 객체를 사용할 수 없음

# 함수의 타입을 정의하기 위해서는 매개변수 타입과 반환 타입이 필요함
## 콜론을 이용해서 매개변수 타입과 반환 타입을 정의할 수 있음

# 자바스크립트에서 함수는 일급(first class)이므로 함수를 변수에 저장할 수 있음
## 함수에 저장할 변수에 타입은 화살표 기호를 이용함
## 함수를 구현하는 코드에서는 매개변수 타입과 반환 타입을 작성하지 않아도 됨 -> 타입스크립트는 오른쪽 코드에서 각각의 타입을 파악하고 있음

# 선택 매개변수는 반드시 입력하지 않아도 되는 매개변수임
## 매개변수 이름 오른쪽에 물음표 기호를 입력하면 선택 매개변수가 됨
## 함수 호출 시 선택 매개변수의 인수를 입력하지 않아도 타입 에러가 발생하지 않음
### 단, 인수 존재 여부를 파악하지 않고, 관련 메서드를 호출하면 타입 에러가 발생함
## 선택 매개변수 오른쪽에 필수 매개변수가 오면 컴파일 에러가 발생함
### 해결책은 유니온 타입을 이용해서 undefined를 입력할 수 있도록 함
### 함수 호출 시에는 중간에 undefined를 입력할 수 있음
#### 이는 컴파일 에러는 발생하지는 않으나 사용성과 가독성이 좋지 않음
#### 매개변수의 갯수가 많은 경우에는 비구조화 문법을 이용해서 명명된 매개변수로 작성하는 게 좋음

# 매개변수의 기본값은 타입 오른쪽에 = 기호를 사용해서 매개변수의 기본값을 정의할 수 있음
## 타입을 입력하지 않아도 매개변수의 기본값을 정의할 수 있음
### 기본값이 문자열이라면 매개변수 타입도 문자열이 됨
## 기본값이 있는 매개변수는 선택 매개변수임

# 나머지 매개변수는 배열로 정의할 수 있음

# 함수의 this 타입을 정의하지 않으면 기본적으로 any 타입이 사용됨 -> 만약 에러가 발생하면 noImplictThis 옵션이 켜져있는지 확인해봐야 함 (noImplictThis 옵션은 항상 this 타입을 명시하는 옵션)
## any 타입은 가급적으로 사용되지 않는 게 좋으므로 this 타입을 정의해 두는 게 좋음
## 함수의 this 타입은 첫번째 매개변수 위치에서 정의할 수 있음

# 원시 타입(primitive) 타입에 메서드를 등록할 때는 인터페이스를 이용함

# 자바스크립트는 동적 타입 언어이므로 하나의 함수가 다양한 매개변수 타입과 반환 타입을 가질 수 있음
## 함수 오버로드(overload)를 사용하면 하나의 함수에 여러 개의 타입을 정의할 수 있음
## 함수를 구현하는 부분에서는 타입 정보가 오히려 방해가 되는 경우도 있음 -> 그런 경우에는 구현하는 함수 바로 위에 // @ts-ignore 코드를 입력하고 any 타입으로 처리해도 됨

# 명명된 매개변수의 타입을 다른 코드에서도 재사용하려면 인터페이스를 사용함

